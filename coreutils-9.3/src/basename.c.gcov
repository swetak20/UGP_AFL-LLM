        -:    0:Source:basename.c
        -:    0:Graph:basename.gcno
        -:    0:Data:basename.gcda
        -:    0:Runs:18
        -:    0:Programs:1
        -:    1:/* basename -- strip directory and suffix from file names
        -:    2:   Copyright (C) 1990-2023 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:#include <config.h>
        -:   18:#include <getopt.h>
        -:   19:#include <stdio.h>
        -:   20:#include <sys/types.h>
        -:   21:
        -:   22:#include "system.h"
        -:   23:#include "error.h"
        -:   24:#include "quote.h"
        -:   25:
        -:   26:/* The official name of this program (e.g., no 'g' prefix).  */
        -:   27:#define PROGRAM_NAME "basename"
        -:   28:
        -:   29:#define AUTHORS proper_name ("David MacKenzie")
        -:   30:
        -:   31:static struct option const longopts[] =
        -:   32:{
        -:   33:  {"multiple", no_argument, NULL, 'a'},
        -:   34:  {"suffix", required_argument, NULL, 's'},
        -:   35:  {"zero", no_argument, NULL, 'z'},
        -:   36:  {GETOPT_HELP_OPTION_DECL},
        -:   37:  {GETOPT_VERSION_OPTION_DECL},
        -:   38:  {NULL, 0, NULL, 0}
        -:   39:};
        -:   40:
        -:   41:void
function usage called 1 returned 0% blocks executed 27%
        1:   42:usage (int status)
        -:   43:{
        1:   44:  if (status != EXIT_SUCCESS)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   45:    emit_try_help ();
call    0 returned 1
        -:   46:  else
        -:   47:    {
    #####:   48:      printf (_("\
call    0 never executed
        -:   49:Usage: %s NAME [SUFFIX]\n\
        -:   50:  or:  %s OPTION... NAME...\n\
        -:   51:"),
        -:   52:              program_name, program_name);
    #####:   53:      fputs (_("\
call    0 never executed
        -:   54:Print NAME with any leading directory components removed.\n\
        -:   55:If specified, also remove a trailing SUFFIX.\n\
        -:   56:"), stdout);
        -:   57:
    #####:   58:      emit_mandatory_arg_note ();
call    0 never executed
        -:   59:
    #####:   60:      fputs (_("\
call    0 never executed
        -:   61:  -a, --multiple       support multiple arguments and treat each as a NAME\n\
        -:   62:  -s, --suffix=SUFFIX  remove a trailing SUFFIX; implies -a\n\
        -:   63:  -z, --zero           end each output line with NUL, not newline\n\
        -:   64:"), stdout);
    #####:   65:      fputs (HELP_OPTION_DESCRIPTION, stdout);
call    0 never executed
    #####:   66:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
call    0 never executed
    #####:   67:      printf (_("\
call    0 never executed
        -:   68:\n\
        -:   69:Examples:\n\
        -:   70:  %s /usr/bin/sort          -> \"sort\"\n\
        -:   71:  %s include/stdio.h .h     -> \"stdio\"\n\
        -:   72:  %s -s .h include/stdio.h  -> \"stdio\"\n\
        -:   73:  %s -a any/str1 any/str2   -> \"str1\" followed by \"str2\"\n\
        -:   74:"),
        -:   75:              program_name, program_name, program_name, program_name);
    #####:   76:      emit_ancillary_info (PROGRAM_NAME);
call    0 never executed
        -:   77:    }
        1:   78:  exit (status);
        -:   79:}
        -:   80:
        -:   81:/* Remove SUFFIX from the end of NAME if it is there, unless NAME
        -:   82:   consists entirely of SUFFIX.  */
        -:   83:
        -:   84:static void
function remove_suffix called 3 returned 100% blocks executed 75%
        3:   85:remove_suffix (char *name, char const *suffix)
        -:   86:{
        -:   87:  char *np;
        -:   88:  char const *sp;
        -:   89:
        3:   90:  np = name + strlen (name);
        3:   91:  sp = suffix + strlen (suffix);
        -:   92:
       12:   93:  while (np > name && sp > suffix)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
branch  2 taken 9
branch  3 taken 0 (fallthrough)
        9:   94:    if (*--np != *--sp)
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:   95:      return;
    #####:   96:  if (np > name)
branch  0 never executed
branch  1 never executed
    #####:   97:    *np = '\0';
        -:   98:}
        -:   99:
        -:  100:/* Perform the basename operation on STRING.  If SUFFIX is non-NULL, remove
        -:  101:   the trailing SUFFIX.  Finally, output the result string.  */
        -:  102:
        -:  103:static void
function perform_basename called 17 returned 100% blocks executed 92%
       17:  104:perform_basename (char const *string, char const *suffix, bool use_nuls)
        -:  105:{
       17:  106:  char *name = base_name (string);
call    0 returned 17
       17:  107:  strip_trailing_slashes (name);
call    0 returned 17
        -:  108:
        -:  109:  /* Per POSIX, 'basename // /' must return '//' on platforms with
        -:  110:     distinct //.  On platforms with drive letters, this generalizes
        -:  111:     to making 'basename c: :' return 'c:'.  This rule is captured by
        -:  112:     skipping suffix stripping if base_name returned an absolute path
        -:  113:     or a drive letter (only possible if name is a file-system
        -:  114:     root).  */
       17:  115:  if (suffix && IS_RELATIVE_FILE_NAME (name) && ! FILE_SYSTEM_PREFIX_LEN (name))
branch  0 taken 3 (fallthrough)
branch  1 taken 14
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  116:    remove_suffix (name, suffix);
call    0 returned 3
        -:  117:
       17:  118:  fputs (name, stdout);
call    0 returned 17
       17:  119:  putchar (use_nuls ? '\0' : '\n');
branch  0 taken 0 (fallthrough)
branch  1 taken 17
call    2 returned 17
       17:  120:  free (name);
call    0 returned 17
       17:  121:}
        -:  122:
        -:  123:int
function main called 18 returned 94% blocks executed 56%
       18:  124:main (int argc, char **argv)
        -:  125:{
       18:  126:  bool multiple_names = false;
       18:  127:  bool use_nuls = false;
       18:  128:  char const *suffix = NULL;
        -:  129:
        -:  130:  initialize_main (&argc, &argv);
       18:  131:  set_program_name (argv[0]);
call    0 returned 18
       18:  132:  setlocale (LC_ALL, "");
call    0 returned 18
       18:  133:  bindtextdomain (PACKAGE, LOCALEDIR);
call    0 returned 18
       18:  134:  textdomain (PACKAGE);
call    0 returned 18
        -:  135:
       18:  136:  atexit (close_stdout);
call    0 returned 18
        -:  137:
        -:  138:  while (true)
    #####:  139:    {
       18:  140:      int c = getopt_long (argc, argv, "+as:z", longopts, NULL);
call    0 returned 18
        -:  141:
       18:  142:      if (c == -1)
branch  0 taken 18 (fallthrough)
branch  1 taken 0
       18:  143:        break;
        -:  144:
    #####:  145:      switch (c)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  146:        {
    #####:  147:        case 's':
    #####:  148:          suffix = optarg;
        -:  149:          /* -s implies -a, so...  */
        -:  150:          FALLTHROUGH;
        -:  151:
    #####:  152:        case 'a':
    #####:  153:          multiple_names = true;
    #####:  154:          break;
        -:  155:
    #####:  156:        case 'z':
    #####:  157:          use_nuls = true;
    #####:  158:          break;
        -:  159:
    #####:  160:        case_GETOPT_HELP_CHAR;
call    0 never executed
    #####:  161:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
call    0 never executed
call    1 never executed
        -:  162:
    #####:  163:        default:
    #####:  164:          usage (EXIT_FAILURE);
call    0 never executed
        -:  165:        }
        -:  166:    }
        -:  167:
       18:  168:  if (argc < optind + 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 17
        -:  169:    {
        1:  170:      error (0, 0, _("missing operand"));
        1:  171:      usage (EXIT_FAILURE);
call    0 returned 0
        -:  172:    }
        -:  173:
       17:  174:  if (!multiple_names && optind + 2 < argc)
branch  0 taken 17 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 17
        -:  175:    {
    #####:  176:      error (0, 0, _("extra operand %s"), quote (argv[optind + 2]));
call    0 never executed
    #####:  177:      usage (EXIT_FAILURE);
call    0 never executed
        -:  178:    }
        -:  179:
       17:  180:  if (multiple_names)
branch  0 taken 0 (fallthrough)
branch  1 taken 17
        -:  181:    {
    #####:  182:      for (; optind < argc; optind++)
branch  0 never executed
branch  1 never executed
    #####:  183:        perform_basename (argv[optind], suffix, use_nuls);
call    0 never executed
        -:  184:    }
        -:  185:  else
       37:  186:    perform_basename (argv[optind],
branch  0 taken 3 (fallthrough)
branch  1 taken 14
call    2 returned 17
       20:  187:                      optind + 2 == argc ? argv[optind + 1] : NULL, use_nuls);
        -:  188:
       17:  189:  return EXIT_SUCCESS;
        -:  190:}
